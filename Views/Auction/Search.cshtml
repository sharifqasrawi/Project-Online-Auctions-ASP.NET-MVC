@using PagedList
@using PagedList.Mvc
@using OnlineAuctionProject.Resources
@using OnlineAuctionProject.Models
@model IPagedList<OnlineAuctionProject.Models.Auction>

@{
    ViewBag.Title = Resource.Search;
}

<h3>
    <span class="glyphicon glyphicon-search"> </span>
    @Resource.SearchResults: @ViewBag.SearchKeyword
</h3>
<h3>
    <span class="glyphicon glyphicon-search"> </span>
    @Resource.ResultsCount: @ViewBag.AuctionsCount
</h3>
<br />

<div class="Box">
    <div class="row">
        <div class="col-lg-12">
            @if (Model.Count <= 0)
            {
                <h3 class="text-info text-center">
                    @Resource.NoSearchResults
                </h3>
            }
            else
            {
                foreach (Auction m in Model)
                {
                    <div class="AuctionBox">
                        <img src="@Url.Content(m.Product.Images[0].Path)" class="img-thumbnail AuctionImg img-responsive" alt="@m.Product.Name (@Resource.Image)" />
                        <p class="text-center">@m.Product.Name</p>
                         <div class="text-center AuctioncountDownTimer">
                            <div id="countdowntimer">
                                <span id="future_date_@m.Id"></span>
                            </div>
                            <script>
                                //countdown
                                $("#future_date_@m.Id").countdowntimer({
                                    startDate: '@DateTime.Now.ToString(new System.Globalization.CultureInfo("en-US"))',
                                    dateAndTime: '@m.Finish_Date.Value.ToString(new System.Globalization.CultureInfo("en-US"))',
                                    size: "xs",
                                    timeUp: timeIsUp,
                                    regexpMatchFormat: "([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})",
                                    regexpReplaceWith: "$1<sup>@Resource.DayAbbr</sup> / $2<sup>@Resource.HourAbbr</sup> / $3<sup>@Resource.MinuteAbbr</sup> / $4<sup>@Resource.SecondAbbr</sup>",
                                    backgroundColor: 'transparent',
                                    borderColor: "transparent",
                                    fontColor: '#00487e'
                                });
                                function timeIsUp() {
                                    location.reload();
                                }
                            </script>
                        </div>
                        <p>@Html.DisplayNameFor(x => x.FirstOrDefault().Current_Bid) : @m.Current_Bid @m.Product.Currency.Name</p>
                        <a href="@Url.Action("ViewAuction", "Auction", new { Id = m.Id })"
                           class="btn btn-success btn-sm AnimatedBtn">
                            @Resource.DetailsAndBidding
                            <span></span>
                        </a>
                    </div>
                }
            }
            <div style="clear:both"></div>

        </div>
    </div>
    @Html.PagedListPager(Model, page => Url.Action("Search", "Auction", new { page, Keyword = Request["Keyword"].ToString() }),
                        new PagedListRenderOptions()
                        {
                            Display = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded
                        })

</div>

